Microsoft (R) Macro Assembler Version 14.25.28611.0	    06/10/20 14:14:34
"Assignment 6     (Assignment6.asm			     Page 1 - 1


				TITLE Assignment 6     (Assignment6.asm)

				; Author: Abraham Almahmoud
				; Last Modified: 06/07/2020
				; OSU email address: almahmoa@oregonstate.edu
				; Course number/section: 271
				; Project Number: 6                Due Date: 06/07/2020
				; Description: Read 10 inputs from user, valided the inputs as proper integer values (negative, or positive) as string, coverting them to interger.
				;			   Convert the 10 numberic values back to string, and display them to the user. Display the sum and average as well.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				getString		MACRO		;should display a prompt, then get the user’s keyboard input into a memory location
					displayString
					push	ebp
					push	ecx
					mov		ebp, esp
					mov		edx, [ebp+12]	;address of list in edx
					mov		ecx, 100
					call	ReadString
					mov		esi, edx
					pop		ecx
					pop		ebp
				ENDM

				displayString	MACRO		;should print the string which is stored in a specified memory location.
					push	ebp
					push	edx				;Save edx register
					mov		ebp, esp
					mov		edx, [ebp+8]
					call	WriteString
					pop		edx				;Restore edx
					pop		ebp				;Restore stack
				ENDM

 00000000			.data
 00000000 50 52 4F 47 52	title_1		BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O prodocedures" , 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 64 6F
	   63 65 64 75 72
	   65 73 00
 0000003F 57 72 69 74 74	author_1	BYTE	"Written by: Abraham Almahmoud", 0
	   65 6E 20 62 79
	   3A 20 41 62 72
	   61 68 61 6D 20
	   41 6C 6D 61 68
	   6D 6F 75 64 00
 0000005D 50 6C 65 61 73	prompt_1	BYTE	"Please provide 10 signed decimal integers.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00000088 45 61 63 68 20	prompt_2	BYTE	"Each number needs to be small enough to fit inside a 32 bit register.", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
 000000CE 41 66 74 65 72	prompt_3	BYTE	"After you have finished inputting the raw numbers I will display a list", 10, "of the integers, their sum, and their average value.", 0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0A 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 00
 0000014B 50 6C 65 61 73	input_1		BYTE	"Please enter an signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 0000016B 45 52 52 4F 52	input_2		BYTE	"ERROR: you did not enter a signed number or your number was too big.", 10, "Please try again: ", 0
	   3A 20 79 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0A 50
	   6C 65 61 73 65
	   20 74 72 79 20
	   61 67 61 69 6E
	   3A 20 00
 000001C3 59 6F 75 20 65	prompt_4	BYTE	"You entered the folowing numbers:", 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6F
	   77 69 6E 67 20
	   6E 75 6D 62 65
	   72 73 3A 0A 00
 000001E6 54 68 65 20 73	prompt_5	BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000204 54 68 65 20 72	prompt_6	BYTE	"The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 0000021D 54 68 61 6E 6B	prompt_7	BYTE	"Thanks for playing!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 00000231  00002710 [		in_list		DWORD	10000 DUP(0)
	    00000000
	   ]
 00009E71  00002710 [		out_list	DWORD	10000 DUP(0)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC
 00000000  68 00000000 R		push	OFFSET title_1
					displayString
 00000005  55		     1		push	ebp
 00000006  52		     1		push	edx				;Save edx register
 00000007  8B EC	     1		mov		ebp, esp
 00000009  8B 55 08	     1		mov		edx, [ebp+8]
 0000000C  E8 00000000 E     1		call	WriteString
 00000011  5A		     1		pop		edx				;Restore edx
 00000012  5D		     1		pop		ebp				;Restore stack
 00000013  E8 00000000 E		call	CrLf
 00000018  68 0000003F R		push	OFFSET author_1
					displayString
 0000001D  55		     1		push	ebp
 0000001E  52		     1		push	edx				;Save edx register
 0000001F  8B EC	     1		mov		ebp, esp
 00000021  8B 55 08	     1		mov		edx, [ebp+8]
 00000024  E8 00000000 E     1		call	WriteString
 00000029  5A		     1		pop		edx				;Restore edx
 0000002A  5D		     1		pop		ebp				;Restore stack
 0000002B  E8 00000000 E		call	CrLf
 00000030  E8 00000000 E		call	CrLf
 00000035  68 0000005D R		push	OFFSET prompt_1
					displayString
 0000003A  55		     1		push	ebp
 0000003B  52		     1		push	edx				;Save edx register
 0000003C  8B EC	     1		mov		ebp, esp
 0000003E  8B 55 08	     1		mov		edx, [ebp+8]
 00000041  E8 00000000 E     1		call	WriteString
 00000046  5A		     1		pop		edx				;Restore edx
 00000047  5D		     1		pop		ebp				;Restore stack
 00000048  E8 00000000 E		call	CrLf
 0000004D  68 00000088 R		push	OFFSET prompt_2
					displayString
 00000052  55		     1		push	ebp
 00000053  52		     1		push	edx				;Save edx register
 00000054  8B EC	     1		mov		ebp, esp
 00000056  8B 55 08	     1		mov		edx, [ebp+8]
 00000059  E8 00000000 E     1		call	WriteString
 0000005E  5A		     1		pop		edx				;Restore edx
 0000005F  5D		     1		pop		ebp				;Restore stack
 00000060  E8 00000000 E		call	CrLf
 00000065  68 000000CE R		push	OFFSET prompt_3
					displayString
 0000006A  55		     1		push	ebp
 0000006B  52		     1		push	edx				;Save edx register
 0000006C  8B EC	     1		mov		ebp, esp
 0000006E  8B 55 08	     1		mov		edx, [ebp+8]
 00000071  E8 00000000 E     1		call	WriteString
 00000076  5A		     1		pop		edx				;Restore edx
 00000077  5D		     1		pop		ebp				;Restore stack
 00000078  E8 00000000 E		call	CrLf
 0000007D  E8 00000000 E		call	CrLf
 00000082  68 00000231 R		push	OFFSET in_list		;16
 00000087  68 0000016B R		push	OFFSET input_2		;12
 0000008C  68 0000014B R		push	OFFSET input_1		;8
 00000091  E8 0000004C			call	ReadVal
 00000096  E8 00000000 E		call	CrLf
 0000009B  68 00000204 R		push	OFFSET prompt_6		;24
 000000A0  68 000001E6 R		push	OFFSET prompt_5		;20
 000000A5  68 000001C3 R		push	OFFSET prompt_4		;16
 000000AA  68 00009E71 R		push	OFFSET out_list		;12
 000000AF  68 00000231 R		push	OFFSET in_list		;8
 000000B4  E8 000000E7			call	WriteVal
 000000B9  E8 00000000 E		call	CrLf
 000000BE  E8 00000000 E		call	CrLf
 000000C3  68 0000021D R		push	OFFSET prompt_7
					displayString
 000000C8  55		     1		push	ebp
 000000C9  52		     1		push	edx				;Save edx register
 000000CA  8B EC	     1		mov		ebp, esp
 000000CC  8B 55 08	     1		mov		edx, [ebp+8]
 000000CF  E8 00000000 E     1		call	WriteString
 000000D4  5A		     1		pop		edx				;Restore edx
 000000D5  5D		     1		pop		ebp				;Restore stack
 000000D6  E8 00000000 E		call	CrLf
					exit	; exit to operating system
 000000DB  6A 00	   *	    push   +000000000h
 000000DD  E8 00000000 E   *	    call   ExitProcess
 000000E2			main ENDP

				; ***************************************************************
				; Procedure to read inputs from user, verifying if correct, and storing 10 total inputs as numeric values in in_list
				; receives: empty list, and prompts
				; returns: User input stored in in_list as numeric values
				; preconditions: None
				; registers changed: edx, esi, edi, eax, ebx, ecx
				; ***************************************************************
 000000E2			ReadVal			PROC		;should invoke the getString macro to get the user’s string of digits. It should then convert the digit string to numeric, while validating the user’s input.
 000000E2  55				push	ebp
 000000E3  8B EC			mov		ebp, esp
 000000E5  8B 55 08			mov		edx, [ebp+8]
 000000E8  8B 7D 10			mov		edi, [ebp+16]
 000000EB  BB 0000000A			mov		ebx, 10

 000000F0			read_next_input:
 000000F0  57				push	edi
 000000F1  52				push	edx
					getString				;reads input from user, store into memory
 000000F2  55		     2		push	ebp
 000000F3  52		     2		push	edx				;Save edx register
 000000F4  8B EC	     2		mov		ebp, esp
 000000F6  8B 55 08	     2		mov		edx, [ebp+8]
 000000F9  E8 00000000 E     2		call	WriteString
 000000FE  5A		     2		pop		edx				;Restore edx
 000000FF  5D		     2		pop		ebp				;Restore stack
 00000100  55		     1		push	ebp
 00000101  51		     1		push	ecx
 00000102  8B EC	     1		mov		ebp, esp
 00000104  8B 55 0C	     1		mov		edx, [ebp+12]	;address of list in edx
 00000107  B9 00000064	     1		mov		ecx, 100
 0000010C  E8 00000000 E     1		call	ReadString
 00000111  8B F2	     1		mov		esi, edx
 00000113  59		     1		pop		ecx
 00000114  5D		     1		pop		ebp
 00000115  53				push	ebx				;store checker for 10 loops
 00000116  8B D8			mov		ebx, eax
 00000118  8B C7			mov		eax, edi
 0000011A  8B CB			mov		ecx, ebx		;move string length to ecx
 0000011C  BB 00000000			mov		ebx, 0
 00000121  57				push	edi				;store memory location
 00000122  AC				lodsb					;check first run
 00000123  3C 2B			cmp		al,43			; '+' is character 43
 00000125  74 06			je		signed
 00000127  3C 2D			cmp		al,45			; '-' is character 45
 00000129  74 0A			je		neg_signed
 0000012B  EB 0F			jmp		numbers
 0000012D			signed:
 0000012D  BB 00000001			mov		ebx, 1
 00000132  49				dec		ecx
 00000133  EB 06			jmp		counter
 00000135			neg_signed:
 00000135  BB 00000002			mov		ebx, 2
 0000013A  49				dec		ecx

 0000013B			counter:					;check current memory in esi
 0000013B  AC				lodsb
 0000013C			numbers:
 0000013C  3C 30			cmp		al,48			; '0' is character 48
 0000013E  7C 45			jl		not_valid
 00000140  3C 39			cmp		al,57			; '9' is character 57
 00000142  7F 41			jg		not_valid
 00000144  AA				stosb
 00000145			signed_save:
 00000145  E2 F4			loop	counter

 00000147  B9 00000001			mov		ecx, 1
 0000014C  E8 00000000 E		call	ParseDecimal32		;converts string to numeric
 00000151  72 32			jc		not_valid			;jump if carry flag is set
 00000153  83 FB 00			cmp		ebx, 0
 00000156  74 16			je		writer
 00000158  53				push	ebx					;store sign checker
 00000159  BB 0000000A			mov		ebx, 10				;if sign was used, divide by ten to remove last repeat digit
 0000015E  99				cdq
 0000015F  F7 F3			div		ebx
 00000161  5B				pop		ebx					;restore sign checker
 00000162  83 FB 01			cmp		ebx, 1
 00000165  74 07			je		writer
 00000167  BB FFFFFFFF			mov		ebx, -1				;negative converting
 0000016C  F7 E3			mul		ebx

 0000016E			writer:							;places numeric inside in_list [ebp+16]
 0000016E  5F				pop		edi					;restore memory location
 0000016F  89 07			mov		[edi], eax
 00000171  83 C7 04			add		edi, 4
 00000174  5B				pop		ebx					;restore loop checker
 00000175  8B C3			mov		eax, ebx
 00000177  4B				dec		ebx
 00000178  83 FB 00			cmp		ebx, 0
 0000017B  74 16			je		end_read
 0000017D  8B 55 08			mov		edx, [ebp+8]
 00000180  E9 FFFFFF6B			jmp		read_next_input		;request next input

 00000185			not_valid:
 00000185  5F				pop		edi
 00000186  5B				pop		ebx
 00000187  8B C3			mov		eax, ebx
 00000189  5A				pop		edx
 0000018A  5F				pop		edi
 0000018B  8B 55 0C			mov		edx, [ebp+12]
 0000018E  E9 FFFFFF5D			jmp		read_next_input

 00000193			end_read:
 00000193  B9 0000000A			mov		ecx, 10
 00000198			loop_stack:						;retore excessive memory
 00000198  5A				pop		edx
 00000199  5F				pop		edi
 0000019A  E2 FC			loop	loop_stack
 0000019C  5D				pop		ebp
 0000019D  C2 0008			ret		8
 000001A0			ReadVal		ENDP

				; ***************************************************************
				; Procedure to convert the numberic values to string. Sum the numberic values, and provide the average
				; receives: in_list, out_list, and prompts
				; returns: nothing
				; preconditions: in_list must be set up with the inital 10 numeric values from ReadVal
				; registers changed: edx, eax, esi, edi, ebx, ecx
				; ***************************************************************
 000001A0			WriteVal	PROC			;should convert a numeric value to a string of digits, and invoke the displayString macro to produce the output.
 000001A0  55				push	ebp
 000001A1  8B EC			mov		ebp, esp
 000001A3  FF 75 10			push	[ebp+16]		;prompt_4
					displaystring
 000001A6  55		     1		push	ebp
 000001A7  52		     1		push	edx				;Save edx register
 000001A8  8B EC	     1		mov		ebp, esp
 000001AA  8B 55 08	     1		mov		edx, [ebp+8]
 000001AD  E8 00000000 E     1		call	WriteString
 000001B2  5A		     1		pop		edx				;Restore edx
 000001B3  5D		     1		pop		ebp				;Restore stack
 000001B4  5F				pop		edi
 000001B5  8B 75 08			mov		esi, [ebp+8]	;inlist
 000001B8  8B 7D 0C			mov		edi, [ebp+12]	;outlist
 000001BB  BB 00000003			mov		ebx, 3			;counter for next_loop to end
 000001C0  53				push	ebx
 000001C1  BB 0000000A			mov		ebx, 10			;counter for display list

 000001C6			loop_writer:				;loop that converts numeric to string
 000001C6  53				push	ebx				;counter for loops
 000001C7  B9 00000000			mov		ecx, 0
 000001CC  8B 06			mov		eax, [esi]		;move memory value to eax
 000001CE  83 F8 00			cmp		eax, 0			;check if interger is negative
 000001D1  7D 07			jge		set_divider
 000001D3  BB FFFFFFFF			mov		ebx, -1
 000001D8  F7 E3			mul		ebx				;convert negative value to positive

 000001DA			set_divider:
 000001DA  BB 0000000A			mov		ebx, 10
 000001DF			loop_num_to_string:
 000001DF  BA 00000000			mov		edx, 0
 000001E4  F7 F3			div		ebx
 000001E6  83 C2 30			add		edx, 48
 000001E9  52				push	edx
 000001EA  41				inc		ecx
 000001EB  83 F8 00			cmp		eax, 0
 000001EE  75 EF			jne		loop_num_to_string
 000001F0  BB 00000000			mov		ebx, 0

				;adds minus signs if negative to the beginning of string
 000001F5  8B 06			mov		eax, [esi]
 000001F7  83 F8 00			cmp		eax, 0			;check if interger is negative
 000001FA  7D 0C			jge		loop_add_to_mem
 000001FC  BA 0000002D			mov		edx, 45
 00000201  52				push	edx
 00000202  41				inc		ecx
 00000203  BB 00000000			mov		ebx, 0

 00000208			loop_add_to_mem:
 00000208  8F 07			pop		[edi]			;store value in mem
 0000020A  47				inc		edi				;increment location space
 0000020B  43				inc		ebx				;increment number of 
 0000020C  E2 FA			loop	loop_add_to_mem

 0000020E  2B FB			sub		edi, ebx		;set memory back to start of string
 00000210  BB 00000000			mov		ebx, 0
 00000215  57				push	edi				;push mem location
					displayString
 00000216  55		     1		push	ebp
 00000217  52		     1		push	edx				;Save edx register
 00000218  8B EC	     1		mov		ebp, esp
 0000021A  8B 55 08	     1		mov		edx, [ebp+8]
 0000021D  E8 00000000 E     1		call	WriteString
 00000222  5A		     1		pop		edx				;Restore edx
 00000223  5D		     1		pop		ebp				;Restore stack

 00000224  5F				pop		edi				;restore mem location
 00000225  83 C6 04			add		esi, 4
 00000228  5B				pop		ebx
 00000229  4B				dec		ebx
 0000022A  83 FB 00			cmp		ebx, 0
 0000022D  74 35			je		next_loop		;after the 10 inital numberic values have been completed, move to next objective (sum, and average)

 0000022F  BA 0000002C			mov		edx, 44			;',' is character 44
 00000234  52				push	edx
 00000235  8F 07			pop		[edi]
 00000237  57				push	edi
					displayString			;display ','
 00000238  55		     1		push	ebp
 00000239  52		     1		push	edx				;Save edx register
 0000023A  8B EC	     1		mov		ebp, esp
 0000023C  8B 55 08	     1		mov		edx, [ebp+8]
 0000023F  E8 00000000 E     1		call	WriteString
 00000244  5A		     1		pop		edx				;Restore edx
 00000245  5D		     1		pop		ebp				;Restore stack
 00000246  5F				pop		edi
 00000247  BA 00000020			mov		edx, 32			;' ' is character 32
 0000024C  52				push	edx
 0000024D  8F 07			pop		[edi]
 0000024F  57				push	edi
					displayString			;display ' '
 00000250  55		     1		push	ebp
 00000251  52		     1		push	edx				;Save edx register
 00000252  8B EC	     1		mov		ebp, esp
 00000254  8B 55 08	     1		mov		edx, [ebp+8]
 00000257  E8 00000000 E     1		call	WriteString
 0000025C  5A		     1		pop		edx				;Restore edx
 0000025D  5D		     1		pop		ebp				;Restore stack
 0000025E  5F				pop		edi
 0000025F  E9 FFFFFF62			jmp		loop_writer

 00000264			next_loop:
 00000264  5B				pop		ebx				;counter for avg_num and end
 00000265  4B				dec		ebx
 00000266  83 FB 00			cmp		ebx, 0
 00000269  0F 8E 0000008E		jle		end_of_code
 0000026F  83 FB 01			cmp		ebx, 1
 00000272  74 3D			je		avg_num
 00000274  53				push	ebx				;store counter for end ebx = 2

 00000275  E8 00000000 E		call	crlf
 0000027A  FF 75 14			push	[ebp+20]		;prompt_5
					displaystring
 0000027D  55		     1		push	ebp
 0000027E  52		     1		push	edx				;Save edx register
 0000027F  8B EC	     1		mov		ebp, esp
 00000281  8B 55 08	     1		mov		edx, [ebp+8]
 00000284  E8 00000000 E     1		call	WriteString
 00000289  5A		     1		pop		edx				;Restore edx
 0000028A  5D		     1		pop		ebp				;Restore stack
 0000028B  5F				pop		edi
 0000028C  8B 7D 0C			mov		edi, [ebp+12]	;outlist

 0000028F  BB 00000000			mov		ebx, 0
 00000294  83 EE 28			sub		esi, 40			;restore esi to base position
 00000297  B9 0000000A			mov		ecx, 10	
 0000029C			sum_num:					;sum the 10 numbers in the in_list
 0000029C  8B 06			mov		eax, [esi]
 0000029E  03 D8			add		ebx, eax
 000002A0  83 C6 04			add		esi, 4
 000002A3  E2 F7			loop	sum_num
 000002A5  89 1E			mov		[esi], ebx		;place the sum in the last position of esi
 000002A7  BB 00000001			mov		ebx, 1
 000002AC  E9 FFFFFF15			jmp		loop_writer		;loop num to string operation with a counter loop of 1

 000002B1			avg_num:
 000002B1  53				push	ebx				;store for end ebx = 1
 000002B2  E8 00000000 E		call	crlf
 000002B7  FF 75 18			push	[ebp+24]		;prompt_6
					displaystring
 000002BA  55		     1		push	ebp
 000002BB  52		     1		push	edx				;Save edx register
 000002BC  8B EC	     1		mov		ebp, esp
 000002BE  8B 55 08	     1		mov		edx, [ebp+8]
 000002C1  E8 00000000 E     1		call	WriteString
 000002C6  5A		     1		pop		edx				;Restore edx
 000002C7  5D		     1		pop		ebp				;Restore stack
 000002C8  5F				pop		edi
 000002C9  8B 7D 0C			mov		edi, [ebp+12]	;outlist
 000002CC  83 F8 00			cmp		eax, 0
 000002CF  7D 0C			jge		divide_num
 000002D1  BB FFFFFFFF			mov		ebx, -1
 000002D6  F7 E3			mul		ebx
 000002D8  B9 00000001			mov		ecx, 1

 000002DD			divide_num:					;divide the numeric sum by 10
 000002DD  BB 0000000A			mov		ebx, 10
 000002E2  99				cdq
 000002E3  F7 F3			div		ebx
 000002E5  83 F9 01			cmp		ecx, 1
 000002E8  75 07			jne		pass_num
 000002EA  BB FFFFFFFF			mov		ebx, -1
 000002EF  F7 E3			mul		ebx
 000002F1			pass_num:					;store the average numeric value in esi
 000002F1  89 06			mov		[esi], eax
 000002F3  BB 00000001			mov		ebx, 1
 000002F8  E9 FFFFFEC9			jmp		loop_writer		;loop once to output average as string
 000002FD			end_of_code:
 000002FD  5D				pop		ebp
 000002FE  C2 0008			ret		8
 00000301			WriteVal	ENDP
				END main
Microsoft (R) Macro Assembler Version 14.25.28611.0	    06/10/20 14:14:34
"Assignment 6     (Assignment6.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00013AB1 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000301 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E2 _TEXT	Length= 000000BE Public STDCALL
  read_next_input  . . . . . . .	L Near	 000000F0 _TEXT	
  signed . . . . . . . . . . . .	L Near	 0000012D _TEXT	
  neg_signed . . . . . . . . . .	L Near	 00000135 _TEXT	
  counter  . . . . . . . . . . .	L Near	 0000013B _TEXT	
  numbers  . . . . . . . . . . .	L Near	 0000013C _TEXT	
  signed_save  . . . . . . . . .	L Near	 00000145 _TEXT	
  writer . . . . . . . . . . . .	L Near	 0000016E _TEXT	
  not_valid  . . . . . . . . . .	L Near	 00000185 _TEXT	
  end_read . . . . . . . . . . .	L Near	 00000193 _TEXT	
  loop_stack . . . . . . . . . .	L Near	 00000198 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001A0 _TEXT	Length= 00000161 Public STDCALL
  loop_writer  . . . . . . . . .	L Near	 000001C6 _TEXT	
  set_divider  . . . . . . . . .	L Near	 000001DA _TEXT	
  loop_num_to_string . . . . . .	L Near	 000001DF _TEXT	
  loop_add_to_mem  . . . . . . .	L Near	 00000208 _TEXT	
  next_loop  . . . . . . . . . .	L Near	 00000264 _TEXT	
  sum_num  . . . . . . . . . . .	L Near	 0000029C _TEXT	
  avg_num  . . . . . . . . . . .	L Near	 000002B1 _TEXT	
  divide_num . . . . . . . . . .	L Near	 000002DD _TEXT	
  pass_num . . . . . . . . . . .	L Near	 000002F1 _TEXT	
  end_of_code  . . . . . . . . .	L Near	 000002FD _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E2 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
author_1 . . . . . . . . . . . .	Byte	 0000003F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
in_list  . . . . . . . . . . . .	DWord	 00000231 _DATA	
input_1  . . . . . . . . . . . .	Byte	 0000014B _DATA	
input_2  . . . . . . . . . . . .	Byte	 0000016B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
out_list . . . . . . . . . . . .	DWord	 00009E71 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 0000005D _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000088 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 000000CE _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 000001C3 _DATA	
prompt_5 . . . . . . . . . . . .	Byte	 000001E6 _DATA	
prompt_6 . . . . . . . . . . . .	Byte	 00000204 _DATA	
prompt_7 . . . . . . . . . . . .	Byte	 0000021D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
title_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
