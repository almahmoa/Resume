Microsoft (R) Macro Assembler Version 14.25.28611.0	    04/18/20 23:36:58
"Assignment 2     (Assignment2.asm			     Page 1 - 1


				TITLE Assignment 2     (Assignment2.asm)

				; Author: Abraham Almahmoud
				; Last Modified:4/18/2020
				; OSU email address: almahmoa@oregonstate.edu
				; Course number/section: 271
				; Project Number: 2                 Due Date: 04/19/2020
				; Description: A program that will calculate Fibonacci numbers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000002E			UPPERLIMIT = 46
 = 00000001			LOWERLIMIT = 1

 00000000			.data
 00000000 46 69 62 6F 6E	p_title			BYTE	"Fibonacci Numbers", 10,  0
	   61 63 63 69 20
	   4E 75 6D 62 65
	   72 73 0A 00
 00000013 50 72 6F 67 72	p_author		BYTE	"Programmed by Abraham Almahmoud", 10, 0
	   61 6D 6D 65 64
	   20 62 79 20 41
	   62 72 61 68 61
	   6D 20 41 6C 6D
	   61 68 6D 6F 75
	   64 0A 00
 00000034 57 68 61 74 27	prompt_1		BYTE	"What's Your Name? ", 0
	   73 20 59 6F 75
	   72 20 4E 61 6D
	   65 3F 20 00
 00000047 48 65 6C 6C 6F	prompt_2		BYTE	"Hello, ", 0
	   2C 20 00
 0000004F 45 6E 74 65 72	prompt_3		BYTE	"Enter the number of Fibonacci terms to be displayed", 10, 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   46 69 62 6F 6E
	   61 63 63 69 20
	   74 65 72 6D 73
	   20 74 6F 20 62
	   65 20 64 69 73
	   70 6C 61 79 65
	   64 0A 00
 00000084 47 69 76 65 20	prompt_4		BYTE	"Give the number as an integer in the range [1 .. 46].", 10, 10, 0
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 61 73 20 61
	   6E 20 69 6E 74
	   65 67 65 72 20
	   69 6E 20 74 68
	   65 20 72 61 6E
	   67 65 20 5B 31
	   20 2E 2E 20 34
	   36 5D 2E 0A 0A
	   00
 000000BC 48 6F 77 20 6D	prompt_5		BYTE	"How many Fibonacci terms do you want? ", 0
	   61 6E 79 20 46
	   69 62 6F 6E 61
	   63 63 69 20 74
	   65 72 6D 73 20
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 3F 20 00
 000000E3 4F 75 74 20 6F	prompt_6		BYTE	"Out of range. Enter a number in [1 .. 46]", 10, 0
	   66 20 72 61 6E
	   67 65 2E 20 45
	   6E 74 65 72 20
	   61 20 6E 75 6D
	   62 65 72 20 69
	   6E 20 5B 31 20
	   2E 2E 20 34 36
	   5D 0A 00
 0000010E 52 65 73 75 6C	goodbye_1		BYTE	"Results certified by Abraham Almahmoud.",10, 0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 41 62 72 61
	   68 61 6D 20 41
	   6C 6D 61 68 6D
	   6F 75 64 2E 0A
	   00
 00000137 47 6F 6F 64 62	goodbye_2		BYTE	"Goodbye, ", 0
	   79 65 2C 20 00
 00000141 2E 00			goodbye_3		BYTE	".", 0
 00000143  00000021 [		input_name		BYTE	33 DUP(0)
	    00
	   ]
 00000164 00000000		input_num		DWORD	?
 00000168 00000001		num_a			DWORD	1
 0000016C 00000000		num_b			DWORD	0
 00000170 00000000		num_c			DWORD	0
 00000174 00000000		num_inc			DWORD	0
 00000178 20 20 20 20 20	space5			BYTE	"     ", 0
	   00
 0000017E 20 20 20 20 20	space6			BYTE	"      ", 0
	   20 00
 00000185 20 20 20 20 20	space7			BYTE	"       ", 0
	   20 20 00
 0000018D 20 20 20 20 20	space8			BYTE	"        ", 0
	   20 20 20 00
 00000196 20 20 20 20 20	space9			BYTE	"         ", 0
	   20 20 20 20 00
 000001A0 20 20 20 20 20	space10			BYTE	"          ", 0
	   20 20 20 20 20
	   00
 000001AB 20 20 20 20 20	space11			BYTE	"           ", 0
	   20 20 20 20 20
	   20 00
 000001B7 20 20 20 20 20	space12			BYTE	"            ", 0
	   20 20 20 20 20
	   20 20 00
 000001C4 20 20 20 20 20	space13			BYTE	"             ", 0
	   20 20 20 20 20
	   20 20 20 00
 000001D2 20 20 20 20 20	space14			BYTE	"              ", 0
	   20 20 20 20 20
	   20 20 20 20 00
 000001E1 2A 2A 45 43 3A	ec_1			BYTE	"**EC: Display the numbers in aligned columns.", 10, 10, 0
	   20 44 69 73 70
	   6C 61 79 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 61
	   6C 69 67 6E 65
	   64 20 63 6F 6C
	   75 6D 6E 73 2E
	   0A 0A 00

 00000000			.code
 00000000			main PROC
				;Introduction
 00000000  BA 00000000 R		mov		edx, OFFSET p_title
 00000005  E8 00000000 E		call	WriteString
 0000000A  BA 00000013 R		mov		edx, OFFSET p_author
 0000000F  E8 00000000 E		call	WriteString
 00000014  BA 000001E1 R		mov		edx, OFFSET ec_1
 00000019  E8 00000000 E		call	WriteString
 0000001E  BA 00000034 R		mov		edx, OFFSET	prompt_1
 00000023  E8 00000000 E		call	WriteString
 00000028  BA 00000143 R		mov		edx, OFFSET input_name
 0000002D  B9 00000020			mov		ecx, 32
 00000032  E8 00000000 E		call	ReadString
 00000037  BA 00000047 R		mov		edx, OFFSET prompt_2
 0000003C  E8 00000000 E		call	WriteString
 00000041  BA 00000143 R		mov		edx, OFFSET	input_name
 00000046  E8 00000000 E		call	WriteString
 0000004B  E8 00000000 E		call	CrLf
				;User Instructions
 00000050  BA 0000004F R		mov		edx, OFFSET	prompt_3
 00000055  E8 00000000 E		call	WriteString
 0000005A  BA 00000084 R		mov		edx, OFFSET	prompt_4
 0000005F  E8 00000000 E		call	WriteString
 00000064  EB 0A			jmp		user_data
				;Get User Data
 00000066			invalid_num:							;text that outputs if number input was invalid
 00000066  BA 000000E3 R		mov		edx, OFFSET prompt_6
 0000006B  E8 00000000 E		call	WriteString
 00000070			user_data:								;prompt input for fibonacci terms
 00000070  BA 000000BC R		mov		edx, OFFSET	prompt_5
 00000075  E8 00000000 E		call	WriteString
 0000007A  E8 00000000 E		call	ReadInt
 0000007F  A3 00000164 R		mov		input_num, eax
				;validate the input
 00000084  83 F8 2E			cmp		eax, UPPERLIMIT
 00000087  7F DD			jg		invalid_num
 00000089  83 F8 01			cmp		eax, LOWERLIMIT
 0000008C  7C D8			jl		invalid_num
				;Display Fibs
 0000008E  E8 00000000 E		call	CrLf
 00000093  8B 0D 00000164 R		mov		ecx, input_num
 00000099			fibonacci_loop:
 00000099  EB 07			jmp fibonacci
 0000009B			return_loop:							;return from conditional statment to continue the loop
 0000009B  E2 FC			loop	fibonacci_loop
 0000009D  E9 0000010A			jmp		goodbye						;ecx has reached 0, jump to farewell
 000000A2			fibonacci:								;fibonacci number generator
 000000A2  A1 00000168 R		mov		eax, num_a
 000000A7  E8 00000000 E		call	WriteDec
				;check which magnitude of 10 the current fibonacci number is at to detrimine the space distance needed for allignment
 000000AC  81 3D 00000168 R		cmp		num_a, 1000000000
	   3B9ACA00
 000000B6  7D 61			jge		insert_space5
 000000B8  81 3D 00000168 R		cmp		num_a, 100000000
	   05F5E100
 000000C2  7D 5C			jge		insert_space6
 000000C4  81 3D 00000168 R		cmp		num_a, 10000000
	   00989680
 000000CE  7D 57			jge		insert_space7
 000000D0  81 3D 00000168 R		cmp		num_a, 1000000
	   000F4240
 000000DA  7D 52			jge		insert_space8
 000000DC  81 3D 00000168 R		cmp		num_a, 100000
	   000186A0
 000000E6  7D 4D			jge		insert_space9
 000000E8  81 3D 00000168 R		cmp		num_a, 10000
	   00002710
 000000F2  7D 48			jge		insert_space10
 000000F4  81 3D 00000168 R		cmp		num_a, 1000
	   000003E8
 000000FE  7D 43			jge		insert_space11
 00000100  83 3D 00000168 R		cmp		num_a, 100
	   64
 00000107  7D 41			jge		insert_space12
 00000109  83 3D 00000168 R		cmp		num_a, 10
	   0A
 00000110  7D 3F			jge		insert_space13
 00000112  BA 000001D2 R		mov		edx, OFFSET space14
 00000117  EB 3F			jmp		write_space
				;write the appropriate space needed for the current fibonacci number for allignment
 00000119			insert_space5:
 00000119  BA 00000178 R		mov		edx, OFFSET space5
 0000011E  EB 38			jmp		write_space
 00000120			insert_space6:
 00000120  BA 0000017E R		mov		edx, OFFSET space6
 00000125  EB 31			jmp		write_space
 00000127			insert_space7:
 00000127  BA 00000185 R		mov		edx, OFFSET space7
 0000012C  EB 2A			jmp		write_space
 0000012E			insert_space8:
 0000012E  BA 0000018D R		mov		edx, OFFSET space8
 00000133  EB 23			jmp		write_space
 00000135			insert_space9:
 00000135  BA 00000196 R		mov		edx, OFFSET space9
 0000013A  EB 1C			jmp		write_space
 0000013C			insert_space10:
 0000013C  BA 000001A0 R		mov		edx, OFFSET space10
 00000141  EB 15			jmp		write_space
 00000143			insert_space11:
 00000143  BA 000001AB R		mov		edx, OFFSET space11
 00000148  EB 0E			jmp		write_space
 0000014A			insert_space12:
 0000014A  BA 000001B7 R		mov		edx, OFFSET space12
 0000014F  EB 07			jmp		write_space
 00000151			insert_space13:
 00000151  BA 000001C4 R		mov		edx, OFFSET space13
 00000156  EB 00			jmp		write_space
 00000158			write_space:
 00000158  E8 00000000 E		call	WriteString
 0000015D  FF 05 00000174 R		inc		num_inc						;track the number of numbers outputted
 00000163  83 3D 00000174 R		cmp		num_inc, 5
	   05
 0000016A  74 02			je		next_line
 0000016C  EB 0F			jmp		math
 0000016E			next_line:								;move to next line if 5 numbers were outputed
 0000016E  E8 00000000 E		call	CrLf
 00000173  C7 05 00000174 R		mov		num_inc, 0
	   00000000
 0000017D			math:									;the math for generating the next fibonacci number			
 0000017D  8B 1D 0000016C R		mov		ebx, num_b
 00000183  89 1D 00000170 R		mov		num_c, ebx
 00000189  8B 1D 00000168 R		mov		ebx, num_a
 0000018F  89 1D 0000016C R		mov		num_b, ebx
 00000195  8B 1D 00000168 R		mov		ebx, num_a
 0000019B  03 1D 00000170 R		add		ebx, num_c
 000001A1  89 1D 00000168 R		mov		num_a, ebx
 000001A7  E9 FFFFFEEF			jmp		return_loop
				;Farewell
 000001AC			goodbye:
 000001AC  E8 00000000 E		call	CrLf
 000001B1  E8 00000000 E		call	CrLf
 000001B6  BA 0000010E R		mov		edx, OFFSET goodbye_1
 000001BB  E8 00000000 E		call	WriteString
 000001C0  BA 00000137 R		mov		edx, OFFSET goodbye_2
 000001C5  E8 00000000 E		call	WriteString
 000001CA  BA 00000143 R		mov		edx, OFFSET	input_name
 000001CF  E8 00000000 E		call	WriteString
 000001D4  BA 00000141 R		mov		edx, OFFSET goodbye_3
 000001D9  E8 00000000 E		call	WriteString
					exit	; exit to operating system
 000001DE  6A 00	   *	    push   +000000000h
 000001E0  E8 00000000 E   *	    call   ExitProcess
 000001E5			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.25.28611.0	    04/18/20 23:36:58
"Assignment 2     (Assignment2.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000211 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001E5 Public STDCALL
  invalid_num  . . . . . . . . .	L Near	 00000066 _TEXT	
  user_data  . . . . . . . . . .	L Near	 00000070 _TEXT	
  fibonacci_loop . . . . . . . .	L Near	 00000099 _TEXT	
  return_loop  . . . . . . . . .	L Near	 0000009B _TEXT	
  fibonacci  . . . . . . . . . .	L Near	 000000A2 _TEXT	
  insert_space5  . . . . . . . .	L Near	 00000119 _TEXT	
  insert_space6  . . . . . . . .	L Near	 00000120 _TEXT	
  insert_space7  . . . . . . . .	L Near	 00000127 _TEXT	
  insert_space8  . . . . . . . .	L Near	 0000012E _TEXT	
  insert_space9  . . . . . . . .	L Near	 00000135 _TEXT	
  insert_space10 . . . . . . . .	L Near	 0000013C _TEXT	
  insert_space11 . . . . . . . .	L Near	 00000143 _TEXT	
  insert_space12 . . . . . . . .	L Near	 0000014A _TEXT	
  insert_space13 . . . . . . . .	L Near	 00000151 _TEXT	
  write_space  . . . . . . . . .	L Near	 00000158 _TEXT	
  next_line  . . . . . . . . . .	L Near	 0000016E _TEXT	
  math . . . . . . . . . . . . .	L Near	 0000017D _TEXT	
  goodbye  . . . . . . . . . . .	L Near	 000001AC _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWERLIMIT . . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPERLIMIT . . . . . . . . . . .	Number	 0000002Eh   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec_1 . . . . . . . . . . . . . .	Byte	 000001E1 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye_1  . . . . . . . . . . .	Byte	 0000010E _DATA	
goodbye_2  . . . . . . . . . . .	Byte	 00000137 _DATA	
goodbye_3  . . . . . . . . . . .	Byte	 00000141 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_name . . . . . . . . . . .	Byte	 00000143 _DATA	
input_num  . . . . . . . . . . .	DWord	 00000164 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_a  . . . . . . . . . . . . .	DWord	 00000168 _DATA	
num_b  . . . . . . . . . . . . .	DWord	 0000016C _DATA	
num_c  . . . . . . . . . . . . .	DWord	 00000170 _DATA	
num_inc  . . . . . . . . . . . .	DWord	 00000174 _DATA	
p_author . . . . . . . . . . . .	Byte	 00000013 _DATA	
p_title  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000034 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000047 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 0000004F _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 00000084 _DATA	
prompt_5 . . . . . . . . . . . .	Byte	 000000BC _DATA	
prompt_6 . . . . . . . . . . . .	Byte	 000000E3 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space10  . . . . . . . . . . . .	Byte	 000001A0 _DATA	
space11  . . . . . . . . . . . .	Byte	 000001AB _DATA	
space12  . . . . . . . . . . . .	Byte	 000001B7 _DATA	
space13  . . . . . . . . . . . .	Byte	 000001C4 _DATA	
space14  . . . . . . . . . . . .	Byte	 000001D2 _DATA	
space5 . . . . . . . . . . . . .	Byte	 00000178 _DATA	
space6 . . . . . . . . . . . . .	Byte	 0000017E _DATA	
space7 . . . . . . . . . . . . .	Byte	 00000185 _DATA	
space8 . . . . . . . . . . . . .	Byte	 0000018D _DATA	
space9 . . . . . . . . . . . . .	Byte	 00000196 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
